version: '3.8'

services:
  # üéØ Frontend - Angular Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "4200:80"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - devboard-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`devboard.local`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  # üöÄ Backend - Node.js API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - MONGO_URI=mongodb://mongo:27017/devboard
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secure-jwt-secret}
      - EMAIL_HOST=${EMAIL_HOST:-smtp.gmail.com}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
    depends_on:
      - mongo
      - redis
    volumes:
      - backend-logs:/app/logs
      - backend-uploads:/app/uploads
    networks:
      - devboard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # üóÑÔ∏è MongoDB - Primary Database
  mongo:
    image: mongo:6.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASS:-secure_password}
      - MONGO_INITDB_DATABASE=devboard
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
      - ./backend/scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - devboard-network
    restart: unless-stopped
    command: mongod --auth --bind_ip_all
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/devboard --quiet
      interval: 30s
      timeout: 10s
      retries: 5

  # ‚ö° Redis - Caching & Session Storage
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./backend/config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - devboard-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üìä Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - devboard-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # üìà Grafana - Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - devboard-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # üîç Elasticsearch - Search & Analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - devboard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # üìä Kibana - Data Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - devboard-network
    restart: unless-stopped

  # üåê Nginx - Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx-logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - devboard-network
    restart: unless-stopped

  # üîÑ Traefik - Modern Reverse Proxy
  traefik:
    image: traefik:v3.0
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=admin@devboard.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "8080:8080"
      - "8443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - traefik-data:/letsencrypt
    networks:
      - devboard-network
    restart: unless-stopped

  # üìß MailHog - Email Testing (Development)
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - devboard-network
    restart: unless-stopped
    profiles:
      - development

  # üß™ Testing - End-to-End Tests
  e2e-tests:
    build:
      context: .
      dockerfile: Dockerfile.e2e
    depends_on:
      - frontend
      - backend
    networks:
      - devboard-network
    volumes:
      - ./cypress/videos:/app/cypress/videos
      - ./cypress/screenshots:/app/cypress/screenshots
    profiles:
      - testing

  # üîß Database Migration & Seeding
  db-migrate:
    build:
      context: ./backend
      dockerfile: Dockerfile.migrate
    depends_on:
      - mongo
    environment:
      - MONGO_URI=mongodb://mongo:27017/devboard
    networks:
      - devboard-network
    profiles:
      - migration

# üì¶ Named Volumes for Data Persistence
volumes:
  mongo-data:
    driver: local
  mongo-config:
    driver: local
  redis-data:
    driver: local
  elasticsearch-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local
  traefik-data:
    driver: local
  backend-logs:
    driver: local
  backend-uploads:
    driver: local
  nginx-logs:
    driver: local

# üåê Networks
networks:
  devboard-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# üè∑Ô∏è Labels for Organization
x-common-labels: &common-labels
  project: "devboard"
  environment: "production"
  maintainer: "devboard-team"
  version: "1.0.0"

# üîß Development Override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
# Development specific configurations
version: '3.8'
services:
  backend:
    environment:
      - NODE_ENV=development
      - DEBUG=devboard:*
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev
    
  frontend:
    volumes:
      - .:/app
      - /app/node_modules
    command: ng serve --host 0.0.0.0 --port 4200
    
  # Development utilities
  mongo-express:
    image: mongo-express:latest
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_ROOT_USER:-admin}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_ROOT_PASS:-secure_password}
    depends_on:
      - mongo
    networks:
      - devboard-network
    profiles:
      - development 